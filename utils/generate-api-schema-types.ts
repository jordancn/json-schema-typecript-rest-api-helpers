import * as fs from 'fs';
import globCb from 'glob';
import { compileFromFile } from 'json-schema-to-typescript';
import * as _ from 'lodash';
import * as path from 'path';
import * as util from 'util';

const SRC_DIR = 'api/schema';
const DEST_DIR = 'api/types';

const glob = util.promisify(globCb);

const ignoredLines = ['tslint:disable', '[k: string]: any'];

const slashJoin = (...params: string[]): string => {
  const pathParts = _.flatten(params.map((p) => p.split('/'))).filter((p) => p.length > 0);

  return pathParts.join('/');
};

const pascalCase = (s: string): string => {
  const c = _.camelCase(s);

  return c.charAt(0).toUpperCase() + c.slice(1);
};

const main = async (): Promise<void> => {
  const jsonSchemaFileNames = await glob(slashJoin(SRC_DIR, '/**/*.json'));

  const schema = await Promise.all(
    jsonSchemaFileNames.map(async (jsonSchemaPath) => {
      const baseFileNameWithExtension = path.basename(jsonSchemaPath);
      const baseFileName = path.basename(baseFileNameWithExtension, '.json');

      const relativeDirectory = jsonSchemaPath.replace(SRC_DIR, '').replace(baseFileNameWithExtension, '');

      const typeScriptType = (await compileFromFile(jsonSchemaPath)).replace(/ {2}/g, '    ').split('\n');
      const filteredTypeScriptType = typeScriptType.filter((line) => !ignoredLines.some((ignoredLine) => line.includes(ignoredLine)));

      const typeScriptFileName = baseFileName.replace('-schema', '-type');

      return {
        baseFileNameWithExtension,
        relativeDirectory: relativeDirectory,
        jsonSchema: {
          name: pascalCase(baseFileName).replace(/Schema$/, ''),
          requirePath: `./${slashJoin(relativeDirectory, baseFileName)}.json`,
        },
        typeScript: {
          filePath: `${slashJoin(DEST_DIR, relativeDirectory, typeScriptFileName)}.ts`,
          includePath: `./${slashJoin(relativeDirectory, typeScriptFileName)}`,
          contents: filteredTypeScriptType.join('\n'),
        },
      };
    }),
  );

  const typeScriptTypeFiles = schema.map((s) => ({
    fileName: s.typeScript.filePath,
    contents: `/* eslint-disable */\n${s.typeScript.contents}`,
  }));

  const typeScriptTypeIndexFile = {
    fileName: slashJoin(DEST_DIR, 'index.ts'),
    contents: `${['// AUTOGENERATED - DO NOT EDIT', '/* eslint-disable */'].join('\n')}\n${schema.map((schemata) => `export * from '${schemata.typeScript.includePath}';`).join('\n')}\n`,
  };

  const schemaIndexFile = {
    fileName: slashJoin(SRC_DIR, 'index.ts'),
    contents: `${['// AUTOGENERATED - DO NOT EDIT', '/* eslint-disable */', '', 'export const Schema = {'].join('\n')}\n${schema
      .map((schemata) => `\t${schemata.jsonSchema.name}: require('${schemata.jsonSchema.requirePath}'),`)
      .join('\n')}\n};\n`,
  };

  const files = [...typeScriptTypeFiles, typeScriptTypeIndexFile, schemaIndexFile];

  await Promise.all(
    files.map(async (file) => {
      const directoryName = path.dirname(file.fileName);

      await fs.promises.mkdir(directoryName, { recursive: true });
      return fs.promises.writeFile(file.fileName, file.contents);
    }),
  );
};

main();
